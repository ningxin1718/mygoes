//@Time  : 2018/5/7 14:47
//@Author: Greg Li
package main

import (
	"crypto/x509"
	"fmt"
	"io/ioutil"
	"encoding/hex"
)

func main() {
	//Cert:="30c28203c39330c28202c2bbc2a00302010202047bc38fc3adc2b6300d06092ac28648c286c3b70d01010b0500307b310b3009060355040613025347311230100603550408130953696e6761706f7265311230100603550407130953696e6761706f72653111300f060355040a1308557365636861696e31143012060355040b130b557365636861696e204341311b301906035504030c1261646d696e40757365636861696e2e6e6574301e170d3138303530323036313632395a170d3139303530323036313632395a30c281c297311230100603550409130973696e6761706f7265310b3009060355040613027367311b3019060355040b1312757365636861696e207465737420636572743111300f060355040a1308757365636861696e311230100603550408130973696e6761706f7265311230100603550407130973696e6761706f7265311c301a06035504030c137a686f75686840757365636861696e2e6e657430c2820122300d06092ac28648c286c3b70d010101050003c282010f0030c282010a02c282010100c290c281c3b33331c3aa024dc3b8c286c393c2981e7a68c28e12055265240906c28ac3b5c29e50c3a6c395c39120c38a76110bc38dc3a9c2ae097ac3a5c2b259c2b4c3a1c29fc38fc29fc283c286c28c6fc3a1c3aac2afc2b12ac2bd49c2b7c3b0c2ba52c3b45f2ec2ab1dc3ac5cc29814c3bd16c2a159c28f70c392c281c39e39630ac28b3a45c39bc2ac2b4714c388c39ec3aa590cc3bf0ec39004c2a2c2983a06c3a13212c3b137c2b44055c281c3a92ec294c2b34e7dc2ae75c2b5c2adc3aec3be02c3b45b0fc28844c39fc39a104ec284c28446c3a0653a18c288c399c2976f5b0dc396407ec2943315c29f5d6bc39e74c3acc29dc3b1c38840c392c39d76c397c38cc293c28064764b7bc2876dc291c2b1c382c38cc38fc2ae2ec3b3c39b69615c3f33673a1fc3bac2aac2b834c2984837c3bb20c281c2883cc289c386c38515c285c3ab336bc2931ec3a6c3a71a22786fc39863c297c295c3b0c2abc3aa344e4e4671c2a90bc29638653c0233c2a22bc3a9c3b65f06480a4633c38876210203010001c2a3423040301f0603551d2304183016c28014c3b217c3b8c2b906c3b1c28246033ec3a04bc282c3a05dc2a7c38ac2b6c2a47b301d0603551d0e04160414c2bb1023c2a0c2b2c28dc3a703c3abc38b18750b3bc39407c392c2adc29157300d06092ac28648c286c3b70d01010b050003c2820101002fc39ac2b2c38bc29116c391c380c3ab21c38c77c2847ac2b6c38f3f6667c3bb7a55c2acc3a01073c3acc2a4c2b554c39e2bc2b902c39a78c395c381426645c2891e30c3bf61c2a2c3b715043c2cc3b0c3b1c38bc3a0051cc2b3c2aa383163c3a3c38cc3abc39f4fc390c2b9c3bdc3bcc3a452c39a62c389c3907e6107c39bc292c2b754c38dc2b4c2b86cc2a84b44c3a0c3bb2745c3a3510734c3a4316100c384c3943dc2a6c397523057c2bbc385c389c3820479c395c2a207c3971fc29d68c39d75c3a7c2a2c387c297383dc2904c1a4cc39d35c38479367f39453cc2974cc2bac39ec392c2b9c292321e201ec2af1f08c383c3af0fc2850e41c39c2bc3957bc3a46dc3b6c3b21cc2a6c2b0c29451c3be692f09c2b5c2972fc285c3aec2892f33c2b9c2b9c29e4550c3aec2bbc283c3a7c29e27c29f4808174466c2bfc2bcc2a2c38d61c286c3a1c2a065737d3b3805730441c2b5c3ad444cc3abc2857577c28521c2bdc2bdc2aa43534d0745c38c21c380c389c38068c2b2c28738c2975f2779"

	//1.解析rca证书
	rcaFile, err1 := ioutil.ReadFile("rootca.cer")
	if err1 != nil {
		fmt.Println("ReadFile err:", err1)
	}

	//rcaBlock, _:= pem.Decode(rcaFile)
	//if rcaBlock == nil {
	//	fmt.Println("rcaFile error")
	//	return
	//}

	rcaCert, err := x509.ParseCertificate(rcaFile)
	if err != nil {
		fmt.Println("ParseCertificate err:", err)
	}

	//2.解析test证书///////////////////////////////////////////////////
	tFile, err := ioutil.ReadFile("xutonghua20180508")
	if err != nil {
		fmt.Println("ReadFile err:", err)
	}
	fmt.Println(tFile)
	tfilestring:=hex.EncodeToString(tFile)
	fmt.Println(tfilestring)

	//tBlock, _:= pem.Decode(tFile)
	//if tBlock == nil {
	//	fmt.Println("tFile error")
	//	return
	//}

	certToByte,_:=hex.DecodeString(tfilestring)
	fmt.Println(certToByte)

	tCert, err := x509.ParseCertificate(certToByte)
	if err != nil {
		fmt.Println("ParseCertificate err:", err)
	}

	//check //////////////////////////////////////////////////////////
	err = tCert.CheckSignatureFrom(rcaCert)
	fmt.Println(err==nil)
}
